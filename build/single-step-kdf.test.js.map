{"version":3,"file":"single-step-kdf.test.js","sourceRoot":"/","sources":["single-step-kdf.test.ts"],"names":[],"mappings":";;AAAA,mCAAiD;AACjD,uDAAkD;AAElD,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,MAAM,YAAY,GAAG,kBAAU,CAC7B,kEAAkE,CACnE,CAAC;QACF,MAAM,SAAS,GAAG,kBAAU,CAC1B,oIAAoI,CACrI,CAAC;QAEF,MAAM,CAAC,GAAG,EAAE;YACV,+BAAa,CAAC,QAAQ,EAAE,YAAY,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC,OAAO,CAAC,wCAAwC,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACjC,MAAM,YAAY,GAAG,kBAAU,CAC7B,kEAAkE,CACnE,CAAC;QACF,MAAM,SAAS,GAAG,kBAAU,CAC1B,0KAA0K,CAC3K,CAAC;QAEF,MAAM,GAAG,GAAG,+BAAa,CAAC,QAAQ,EAAE,YAAY,EAAE,EAAE,EAAE,SAAS,CAAC,CAAC;QACjE,MAAM,MAAM,GAAG,kBAAU,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;QAC7C,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CACjB,kEAAkE,CACnE,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { hexToBytes, bytesToHex } from \"./utils\";\nimport { singleStepKDF } from \"./single-step-kdf\";\n\ndescribe(\"Single Step KDF sha256\", () => {\n  it(\"returns error if outlength is 0 or less\", () => {\n    const sharedSecret = hexToBytes(\n      \"A88B995FECBDF756515ED42BA53A6CCCA4F5936F69CF4D15352C94C592B347B1\"\n    );\n    const fixedInfo = hexToBytes(\n      \"0499A6F42E83EA4F150A78780FFB562C9CDB9B7507BC5D28CBFBF8CC3EF0AF68B36E60CB10DB69127830F7F899492017089E3B73C83FCF0EBDF2C06B613C3F88B7\"\n    );\n\n    expect(() => {\n      singleStepKDF(\"sha256\", sharedSecret, 0, fixedInfo);\n    }).toThrow(\"outLengthBytes must be greatear than 0\");\n  });\n\n  it(\"returns a valid AES key\", () => {\n    const sharedSecret = hexToBytes(\n      \"A88B995FECBDF756515ED42BA53A6CCCA4F5936F69CF4D15352C94C592B347B1\"\n    );\n    const fixedInfo = hexToBytes(\n      \"0D69642D6165733235362D47434D4170706C650499A6F42E83EA4F150A78780FFB562C9CDB9B7507BC5D28CBFBF8CC3EF0AF68B36E60CB10DB69127830F7F899492017089E3B73C83FCF0EBDF2C06B613C3F88B7\"\n    );\n\n    const kdf = singleStepKDF(\"sha256\", sharedSecret, 32, fixedInfo);\n    const kdfHex = bytesToHex(kdf).toUpperCase();\n    expect(kdfHex).toBe(\n      \"083080D3D0C521C02CD3AE2134363D09EA50DFF914677FAB9E22F18F9C28A3B9\"\n    );\n  });\n});\n"]}