{"version":3,"file":"utils.test.js","sourceRoot":"/","sources":["utils.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,oDAA4B;AAC5B,mCAAiD;AAEjD,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,EAAE,CAAC,YAAY,EAAE,GAAG,EAAE;QACpB,MAAM,GAAG,GAAG,QAAQ,CAAC;QACrB,MAAM,KAAK,GAAG,kBAAU,CAAC,GAAG,CAAC,CAAC;QAC9B,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,GAAS,EAAE;QAC9C,MAAM,SAAS,GAAG,MAAM,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC9D,gBAAM,CAAC,WAAW,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;gBACrC,IAAI,GAAG,EAAE;oBACP,MAAM,CAAC,GAAG,CAAC,CAAC;iBACb;gBACD,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;YAClC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,KAAK,GAAG,kBAAU,CAAC,SAAS,CAAC,CAAC;QACpC,MAAM,CAAC,kBAAU,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC5C,CAAC,CAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;QAC/B,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;QAC3C,MAAM,GAAG,GAAG,kBAAU,CAAC,KAAK,CAAC,CAAC;QAC9B,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import crypto from \"crypto\";\nimport { hexToBytes, bytesToHex } from \"./utils\";\n\ndescribe(\"hexToBytes\", () => {\n  it(\"hexToBytes\", () => {\n    const hex = \"3007de\";\n    const bytes = hexToBytes(hex);\n    expect(bytes.toString()).toBe([48, 7, 222].toString());\n  });\n\n  it(\"converts a random hex to bytes\", async () => {\n    const randomHex = await new Promise<string>((resolve, reject) => {\n      crypto.randomBytes(16, (err, buffer) => {\n        if (err) {\n          reject(err);\n        }\n        resolve(buffer.toString(\"hex\"));\n      });\n    });\n\n    const bytes = hexToBytes(randomHex);\n    expect(bytesToHex(bytes)).toBe(randomHex);\n  });\n});\n\ndescribe(\"bytesToHex\", () => {\n  it(\"converts bytes to hex\", () => {\n    const bytes = new Uint8Array([90, 189, 6]);\n    const hex = bytesToHex(bytes);\n    expect(hex).toEqual(\"5abd06\");\n  });\n});\n"]}